Handling massive files,
leaked data and documents
Emilia Diaz-Struck, ICIJ
Jack Gillum, The Washington Post
Brad Heath, USA Today

HANDLING IT SAFELY
When important records show up, how can you
download or look at them without burning your source
— or putting your organization’s network at risk?
● Air-gapped machines (read: laptops you were
going to throw away anyway)
● Amazon EC2

MAKING SENSE OF IT
How can you start to look at this pile of stuff? It
depends on what’s there and what you’re trying to
find. Some of the best tools:
● Examining connections in your data: Neo4j
● Searching across text: Sphinx, MySQL, Lucerne
● Tagging, finding pages: Overview, DocCloud

Neo4j example with large contracting dataset

Neo4j example with large contracting dataset

IS THIS REAL?
Authentication has always been a challenge. Hacked
data and anonymous leaks made it a bigger one.
Some things to look at:
● Independently verifiable data points
● Sources identified in the records
● Patterns in the records vs. real life
● Signs of falsification or editing
● What if you can’t?

THERE ARE LANDMINES
And snakes. And snakes on top of landmines.
● Some legal risks
○ Copyright, CFAA, conspiracy.
● Risks to your sources
● Risks to your company and computers

WHEN TO PREPARE
Right now.

PUBLISHING IT
● What is the story we're really trying to tell?
● Should we ever publish the underlying
documents?
○ This includes attachments and the emails
themselves: Who would have had access to
this?
○ Consider the metadata.

CASE STUDY:
The Panama Papers
https://panamapapers.icij.org

NOT EVERY LEAK
BECOMES A STORY
● Public interest
● Who is affected?
● What is the scope of the situation?
● Will it have an impact? Will it hold the powerful
accountable? Does it address social justice?
● Verification process
From the leak to a journalistic investigation!

Public version: https://offshoreleaks.icij.org/

CASE STUDY:
Building your own tools
● Emails from Sony
● WikiLeaks
● Other messages over the transom
At the AP, we built internal tools to extract and search
emails, as well as their attachments

● Ruby gem “mail” (https://github.com/mikel/mail)
● Apache Tika (https://tika.apache.org)
● MySQL

CASE STUDY:
Big collections made simple

