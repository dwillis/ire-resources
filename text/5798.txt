Tipsheet: What is DKIM Verification?
Jeremy B. Merrill // ​jeremybmerrill@gmail.com
NICAR 2019; Newport Beach, Calif.
Last updated: Feb 27, 2019
Basic Command-Line Familiarity Required

What is DKIM/ARC Signing?
A colleague says, “Hey I got this email forwarded to me by a source, in it so-and-so is saying…”.
Or a leaked emails are published by a transparency organization that might have ties to Russian
intelligence. (Hypothetically!)
How do you check that those emails aren't forgeries? Verifying ​DKIM​ and ​ARC​ signatures are
one way. The two things are ​almost ​identical for our purposes; this tipsheet focuses on DKIM,
but everything here applies to ARC too, except where I call out the difference explicitly.
DKIM is a piece of the "plumbing" of the email system where a ​digital signature​ is attached to
an email, summarizing the email in a way that can't be faked. Digital signatures are the mirror
image of encryption; mathematically, they're basically the same thing.
With encryption, you publish widely a mathematical padlock that anyone can use to send a
message that only you can "unlock" (i.e. decrypt) with a key that you keep secret -- giving
anyone the ability to create a message that is guaranteed to only be opened by you. With digital
signing, you publish the ​key ​widely while keeping the padlock private; a message that's digitally
signed -- i.e. locked with your padlock -- can be opened by anybody, but is guaranteed to have
been sent by you.
With DKIM, the sender's mail server digitally signs a summary of the message and attaches it to
the message. You can use a computer program to create a summary of the copy of the email
you have and compare your summary to the digital signed one. If they match, then you have a
copy of the email that's identical to the one that was sent. (With ARC, it's the recipient's mail
server that signs the summary.)
It's important to understand the ​details of the guarantees​ that DKIM and ARC give you.

What Does It Tell Me If An Email "Verifies"?
If the DKIM signature verifies, then the email you have is the same as the email that was sent.
That means your source didn't tamper with the email. However, it doesn't rule out other possible
shenanigans.

●
●

Did someone hack into the sender’s account, or steal their phone, and send the email?
Is someone else’s server impersonating the sender’s server? (Is it really ProPublica.org
that sent the email?) Unlikely, but read up on SPF ("Sender Policy Framework")
If the newsworthy bit of the email is a forward or a reply, be conscious that anybody can, of
course, change the content at the bottom of their message. A verified signature might mean that
the email really was sent as you have it, but it doesn't verify that the forwarded bits weren't
modified. So try to get the original email where the newsworthy bit was ​first​ sent.

What Does It Tell Me If An Email Doesn't Verify?
Basically nothing​. It does NOT mean that the email has been tampered with. I'll say that again:
A failed signature verification ​does not mean​ that the email has been tampered with. There are
all sorts of mundane reasons why the signature verification might fail on an authentic email.
(Cryptographic keys can be replaced; misconfigured servers can make small changes to
whitespace or smart quotes, etc.)
If a signature verification fails, I recommend that you consider yourself right where you started -relying on traditional techniques to authenticate the email.

More Details Please!
Whenever someone sends email with, say, Gmail, the email message includes a recipe to
create a summary of the email, mushing together the subject, the sender, the date, etc., along
with the body. The email message also includes a digitally-signed summary generated by that
same recipe.
Separately, the sending server (e.g. Gmail) publishes a cryptographic key. That key is what's
used to digitally-sign the summary; you're cryptographically guaranteed that the contents of the
signed summary were generated by Google.
To detect if the email is authentic, we follow the recipe create our own numerical summary and
extract Gmail's original summary from the email message, using the public key. Then we
compare them. If they don't match, we know some characters were changed from what got sent
from Gmail and what we have. If they do, we know they're exactly the same, and the email is
authentic (subject to the caveats above).

Okay, I'm Aware of the Caveats. How Do I Verify an
Email?
First, you need the "source code" of the email. Every email client is different, but every email
client provides a way to get this. In Gmail, first click the menu button, then "Show original". Once
you're on the "Original Message" screen, click "Download Original". If the email was given to
you by a source, you may have to call them back and walk them through this process. If the
source is uncooperative -- or if the source only has a forwarded version of the email -- then you
might be out of luck. Just a forwarded email isn't enough, you need the original.

Once you have the file (which I assume is called ​test.eml​ ). Now, you need a Python library
called `dkimpy`. In a terminal window, type `​pip install --user dkimpy​` to install the
library. Once it's done, run this command:
dkimverify < test.eml
You might get a response like ​signature ok​. That means the signature verifies. If the
response is ​signature verification failed​, well, the signature doesn't verify.
Use the ​arcverify < test.eml​ command to check the ARC signature. a
​ rc
verification: cv=pass success​ means success and something like ​arc
verification: cv=b'fail' Most recent ARC-Message-Signature did not
validate​ means failure.
Dkimpy works with .eml files. Sometimes these EML files come with a .txt extension. There are
other actually very few independent libraries for DKIM/ARC verification besides Dkimpy (and my
Ruby clone of it, Dkimverify).

