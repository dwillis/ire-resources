Python 101 Tipsheet
NICAR19 + Newport Beach, California + March 7, 2019
Mindy McAdams, University of Florida + Twitter ​@macloo​ + GitHub ​@macloo
Slide deck: ​http://bit.ly/mm-python101s
Check out ​Cody Winchester’s list​ of all Python sessions at NICAR19

What is Python?
Python.org​ home — ​https://www.python.org/
● Download Python here
● Official documentation
● Language reference​ ⬅ look up anything
● Tutorial
By itself, Python can be used to write useful programs. By downloading specific code ​libraries
(also called ​packages​ or sometimes ​modules​), we instantly get a whole lot ​more​ capabilities.
See the next section.
Available packages are listed in the ​Python Package Index​ (PyPI), but don’t feel you need to
look at that.
Python has a ​style guide​! (Oh, my copy editor’s heart, be still!)
PEP 8 — Style Guide for Python Code
The style guide famously has a section titled ​A Foolish Consistency is the Hobgoblin of
Little Minds​.

How to install Python
Installing Python is easy​ with the installer (for your OS) from Python.org. However, it’s sort of
deceptively​ easy. Once it’s installed, how do you run it? And where is it, should you need to find
it? The answers are different on Mac and on Windows. Here’s ​the list of instructions​ my
students follow to install Python 3.
Also see: ​Week 01: Starting Python

1

How to run Python
You can run Python commands ​interactively​ in the Python interpreter. Once Python has been
installed, open Terminal (​Mac​) and type ​python3​ at the $ prompt. In ​Windows​, open Command
Prompt and type ​python​. When you see ​this prompt, y​ ou’re in the interpreter:​ ​>>>
To write ​a stored program,​ you can use any code editor, such as ​Atom​. Save the file with a ​.py
extension. To run it, change into the directory where the file is.* Assuming a Python file named
myfile.py​ —
Run it like this on Mac: ​ python3 myfile.py
Run it like this on Windows: ​ python myfile.py
* ​How to change into the directory where the file is:​ (1) Arrange your Terminal or Command
Prompt window on your screen so you can see it and ​also​ see your Finder or File Explorer,
where your folders are. (2) In the Finder or File Explorer, navigate so you can see the folder that
your file is ​inside.​ (3) In your Terminal or Command Prompt window, type ​cd​ and ​one space
after it. (4) ​Drag​ the folder from the Finder or File Explorer and ​drop​ it in your Terminal or
Command Prompt window. (5) If there is a ​space​ after the long pathname (and there probably
is), backspace-delete that space. (6) Press Return or Enter. Now you have changed into that
directory. To run your Python program, do what it says above.

How do journalists use Python?
1.
2.
3.
4.
5.
6.
7.

Scraping: web sites, PDFs, emails
Data analysis / transformation; data cleaning / exploration (library:
Pandas)
Build internal web sites (frameworks: Django or Flask)
Document dumps
Build external sites (generate a mini-site from a database)
Automation: OCR, document management tasks, rename files, move
audio files and process them for Alexa, resize/manage images, + more
Machine learning (library: scikit-learn)

2

How do journalists use Python?
These are the ​libraries​ used most in journalism work:
●
●
●
●
●
●
●
●
●

Pandas​ (data analysis) — ​PyPi
NumPy​ (super-powered array processing); Pandas uses this
BeautifulSoup4​ (web scraping)
Django​ (web dev framework)
Flask​ (micro framework)
Jupyter Notebook​ (great for documenting and sharing your code)
scikit-learn​ (machine learning)
Matplotlib​ (plots and charts); Pandas uses this
Seaborn​ (data visualization) — ​PyPi

A February 2019 ​article at TechRepublic​ summarizes ​Python developers’ favorite tools,
based on the extensive ​2018 Python Developers Survey​.

Installing and managing packages
Anaconda​ is a package manager and a massive collection of ​data science libraries​ for Python.
These libraries (which ​can be installed one by one​ and ​without​ Anaconda) include ALL of those
listed above — and many more. ​It’s a h
​ uge​ download and a long install.​ If you download
Anaconda, you will then manage your Python packages with it (and ​not​ with pip3).
If ​instead​ you want to install packages one by one, ​as needed,​ you can do so with ​pip3​. If you
installed Python 3 by itself, alone, ​you already have pip3​. Most Python libraries (packages)
can be installed with a ​pip command,​ which means: p
​ ip3 install package_name​ at the bash
prompt ($). My students and I use pip3, not Anaconda.
If you see older documentation that says “pip” instead of “pip3” — just type “pip3” anyway. It’s
newer and it works.
If you see a line that says something like ​pip install --upgrade pip​ — simply run
pip3 install --upgrade pip​ and the pip package will be updated for you.

How can you get started learning Python?
Automate the Boring Stuff with Python​ — ​the best book for beginners​ (IMO), especially those
who have not learned any other programming languages before. The entire book is online, free,
as HTML. You can buy a printed book or a PDF version from the publisher (all at this one link).

3

I love this book! T
​ he author also has videos on YouTube.
● Read chapters 1 and 2 and do all the exercises. This is your foundation, so make sure
you understand ​everything.​ These basics are ​really important​ if Python is your first
language. (​examples​)
● Read chapter 3. ​Functions​ are challenging for most people in their first-ever
programming language. Be patient with yourself. Do the exercises. (​examples​)
● Chapter 4 (​loops​) is vital. If functions have fried your brain, give them a rest and read
this and work with loops. Return to functions afterward. (​examples​)
● I’d say the rest of the book is “as you need it,” but ​I do want to recommend two other
sections. Chapter 8, pages 180–183, explains ​how to read and write plain-text files
with Python. Chapter 5 explains Python ​dictionaries​. A dictionary is a more complex
data structure than a list, handy for many things we do with data. Looks like JSON.
● Chapter 13: Working with PDF and Word Documents
● Chapter 14: Working with CSV Files and JSON Data
● You get the idea!
Not ready to download and install Python?​ Play with Python code here, free, ​nothing to install​:
https://repl.it/
● Sample 1: ​https://repl.it/@macloo/testsomePython3here
● Sample 2: ​https://repl.it/@macloo/pythonfunctionexample
Core Python Language Tutorials​, at RealPython.com (mostly free)
Various Python lessons; NOT free
● Codecademy
● Treehouse
python-beginners​ — a GitHub repo I made for my journalism students. It covers:
● Learning Python as your first language
● Web scraping
● Flask
The Hitchhiker’s Guide to Python!​ Soup to nuts, how to do anything with Python.
A side note:​ I learned Python 2 from ​Learn Python the Hard Way​ several years ago when
Python 3 was new and many libraries had not yet been converted. (Python 3 was a huge
upgrade and not backward-compatible.) The author, Zed Shaw, eventually updated his
materials to cover Python 3, but ​by then I’d discovered the ​Automate​ book, and I strongly prefer
it.​ Nowadays there’s no reason to learn or use Python 2 (unless you’re stuck with legacy code).

4

Something I’d rather not talk about
Virtual environments​ are a necessary evil with Python.​ ​You might not need them immediately,
but as a journalist, you will need them soon. They confused the heck out of me for a while, and
rather than bore you with why and how, I’ll just say that when one day I installed one library too
many on my MacBook, ​everything related to Python essentially broke.​ After I uninstalled
everything and reinstalled them all again, I learned to love virtualenv.

You can ignore ​everything​ below until you need it.

Install ​virtualenv
Make sure you’re connected to the Internet. In Terminal or Command Prompt:
sudo -H pip3 install virtualenv
Note​ the ​uppercase H​. The command line is ​always​ ​case-sensitive​.
If you get a message that ​pip is not found:
sudo -H easy_install install pip
And then repeat the previous command.
Windows users​ should omit ​sudo -H​ from those commands.
You will be asked for your password. ​When you type it, you will not see it.
PressEnter/Return after typing it.
If y
​ ou get a message that ​you should consider upgrading pip:​
sudo -H pip3 install --upgrade pip
Windows users​ should omit ​sudo -H​ from the command.
Note that the ​virtualenv​ package will have already installed even before the upgrade.
Now that virtualenv is ​installed​ on your entire computer, you never need to install it again. That
part is finished.

Create a ​new​ virtual environment with Python3 (Mac OS)
Do this ONCE for any new Python project.

5

(​Windows​ users: see BELOW for ​different​ instructions)
First,​ ​cd​ ​into the ​directory​ where you will be storing the files for this project or projects. If the
directory does not yet exist, create it using​ ​mkdir​ ​and then​ ​cd​ ​into it.
To create a new virtualenv​ using ​Python 3​, type this at the bash prompt (​$​):
virtualenv --python=/usr/local/bin/python3 env
Why is this important?​ Because every Mac ​also​ has Python 2 on it.
Make sure you are INSIDE the project folder (in Terminal) where you want to ​activate​ this
virtual environment. Your command has created a new folder named ​env​; this will store
information about any libraries you install for use in this project. It makes your project portable. It
helps you manage all the installed things. Libraries are ​unavailable​ if the virtualenv is not active.
NOTE:​ ​You only ​create​ a virtualenv ​once​ in any directory.​ You may create other virtual
environments in other directories.
You can now ​run​ the ​virtualenv​ (​activate​ it) with:
source env/bin/activate

Your bash prompt will change:
(env) blah blah stuff blah $

To deactivate an active virtualenv,​ type this command ​after the dollar sign:​
deactivate
NOTE:​ Whenever you’re in an active virtualenv that you create with Python3, you’re ​always
using Python3, even though you typed only ​python​, and not ​python3​.

Windows only: Create a ​new​ virtual environment with Python3
Do this ONCE for any new Python project.
To create a NEW ​virtualenv​ ​in the directory you are currently in​ —
virtualenv --python=C:\​Python37​\python.exe env
6

CREATES a new ​env​ directory in the current directory. NOTE THE BACKSLASHES!
NOTE:​ The ​Python37​ part might not be right for you. Here’s how to check ​in Python​:
>>> ​import os
>>> ​import sys
>>> ​os.path.dirname(sys.executable)
The ​next line​ you see will give you the full path to your Python3.
Use that line to replace ​Python37​ in the command shown above.
You can now ​run​ the ​virtualenv​ (​activate​ it) with:
env\Scripts\activate.bat
NOTE the uppercase ​S​ in ​Scripts​. Windows cares about that.
Make sure you are INSIDE the project folder (in Command Prompt) where you want to ​activate
this virtual environment. Your command has created a new folder named ​env​; this will store
information about any libraries you install for use in this project. It makes your project portable. It
helps you manage all the installed things. Libraries are ​unavailable​ if the virtualenv is not active.
NOTE:​ ​You only ​create​ a virtualenv ​once​ in any directory.​ You may create other virtual
environments in other directories.
To ​quit​ the ​virtualenv​, you should be able to type just this:
deactivate

After creating a ​virtualenv​ — Mac and Windows
You have a virtualenv in a project folder of your choosing.
Before working in that folder, ​activate​ the virtualenv:
source env/bin/activate​ (Mac)
env\Scripts\activate.bat​ (Windows)
MAKE SURE the env is ​activated​ ​before​ you install any libraries for your project.
To deactivate a virtualenv on either operating system:

7

deactivate
While the virtualenv is ​activated​, you’ll see ​(env)​ at the far left side of every command prompt.
There are other ways to handle virtualenvs.​ This is the way I’ve found works best for me and my
classes of undergrad journalism students at the University of Florida.
In particular, some people will recommend you also install and use a package called
virtualenvwrapper​ — ​I do not use this​.
You’ll also see people making their virtualenv and naming it after their project (instead of
naming it ​env,​ as I do). For me, this adds a layer of complexity because you’d need to keep
track of what you named all your different envs. I can’t deal with that! So for me, my projects are
each self-contained in their own separate folders, and each folder has an ​env​ inside it, and I
activate any env by ​changing into that folder ​(directory) and typing the same command there.
One caveat:​ ​If you ​rename​ the project folder, or ​move​ it, or even rename a folder that ​contains
your project folder, your virtualenv ​breaks​.​ The easiest way to fix this is to ​delete​ the ​env​ folder
in that project and re-create it. If you have installed ​more than one or two libraries,​ please
read/do this ​first​ (before deleting the ​env​ folder):
Creating or using requirements.txt

A word about pipenv
pipenv​ is an ​alternative​ to everything about virtualenv above. I was all ready to give it a whirl last
summer, but then I started reading about idiosyncrasies and such, and I lost heart. I have to
keep a bunch of undergrad journalism students on track with reliable tools and multiple
assignments and projects, so for now I’m sticking with what I know works.

Bitlink: ​http://bit.ly/mm-python101
Updated March 8, 2019

8

